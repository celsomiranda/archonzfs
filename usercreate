#!/bin/bash

# Create an Encrypted User Home dataset

set -e

if [[ -f $1 ]]; then
set -a
. "$1"
set +a
fi

ask () {
    read -p "> $1 " -r
    echo
}

passask () {
    while true; do
      echo
      echo "> $1"
      read -r -s PASS1
      echo
      echo "> Verify $1"
      read -r -s PASS2
      echo
      [ "$PASS1" = "$PASS2" ] && break || echo "Passwords do not Match. Please try again."
    done
    echo "$PASS2" > "$2"
    chmod 000 "$2"
    print "$1 can be reviewed at $2 prior to reboot"
    unset PASS1
    unset PASS2
}

print () {
    echo -e "\n\033[1m> $1\033[0m\n"
}

print "Create User"
  ask "Would you like to create a Privileged User?"
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    ask "Name of Privileged User you would like to create?"
    USERNAME=$REPLY
    passask "Password and Encryption Key for Privileged User" "$USERPASS"
    awk "{ print $USERNAME: $0 }" "$USERPASS" > /tmp/user-chpasswd.key
    PRIVILEGED=1
else
    ask "Name of Unprivileged User you would like to create?"
    USERNAME=$REPLY
    passask "Password and Encryption Key for Privileged User" "$USERPASS"
    awk "{ print $USERNAME: $0 }" "$USERPASS" > /tmp/user-chpasswd.key
fi

zfs create -o encryption=on -o keyformat=passphrase -o keylocation=prompt -o canmount=noauto zroot/data/home/"$USERNAME"
zfs set home."$HOSTNAME".automount:user="$USERNAME" zroot/data/home/"$USERNAME"
zfs mount -a

if [[ -n "$PRIVILEGED" ]]; then
  useradd -mG wheel "$USERNAME"
  echo "$USERNAME ALL=(ALL) ALL" > /etc/sudoers.d/"$USERNAME"
else
  useradd -m "$USERNAME"
fi
chpasswd  < /tmp/user-chpasswd.key
echo "$USERNAME ALL = NOPASSWD: /usr/bin/systemctl start home-$USERNAME.mount" >> /etc/sudoers.d/"$USERNAME"

UID=$(grep "$USERNAME:x" /etc/passwd | cut -d \: -f 3)

cat > /etc/systemd/system/home-"$USERNAME".mount << EOF
[Unit]
Description=Home Directory for $USERNAME
Requires=user@$UID.service
Before=user@$UID.service

[Mount]
Where=/home/$USERNAME
What=zroot/data/home/$USERNAME
Type=zfs
Options=defaults,atime,relatime,nodev,exec,rw,suid,nomand,zfsutil
LazyUnmount=On

[Install]
RequiredBy=user@$UID.service
EOF

  cat > /mnt/etc/systemd/system/home-"$USERNAME".automount << EOF
[Unit]
Description=Automount Home Directory for $USERNAME
Requires=user@$UID.service
Before=user@$UID.service

[Mount]
Where=/home/$USERNAME
TimeoutIdleSec=20

[Install]
RequiredBy=user@$UID.service
EOF

  cat > /etc/systemd/system/zfs-unload-"$USERNAME".service << EOF
[Unit]
Description=Unload Key after session Ends for $USERNAME
BindsTo=$(systemd-escape home/"$USERNAME").mount
Requires=$(systemd-escape home/"$USERNAME").mount
Before=$(systemd-escape home/"$USERNAME").mount
Conflicts=umount.target
Before=umount.target

[Service]
Type=oneshot
RemainAfterExit=yes
TimeoutSec=0
ExecStop=-/usr/bin/zfs unload-key zroot/data/home/$USERNAME

[Install]
RequiredBy=user@$UID.service
EOF


if [ ! -f /usr/local/bin/mount-zfs-homedir ]; then
cat > /usr/local/bin/mount-zfs-homedir << "EOF"
#!/bin/bash

set -eu

PASS=$(cat -)
zfs get canmount -s local -H -o name,value | while read volname canmount; do
  [[ \"$canmount\" = 'noatuo' ]] || continue
  user=$(zfs get home.archiso.automount:user -s local -H -o value \"$volname\")
  [[ \"$user\" = \"$PAM_USER\" ]] || continue
  zfs load-key \"$volname\" <<< \"$PASS\" || true
done
EOF
fi
sed -i s/archiso/"$HOSTNAME"/ /usr/local/bin/mount-zfs-homedir
chmod +x /usr/local/bin/mount-zfs-homedir

if ! grep -q mount-zfs-homedir /etc/pam.d/system-login; then
cat > /etc/pam.d/system-login << "EOF"
#%PAM-1.0

auth       required   pam_shells.so
auth       requisite  pam_nologin.so
auth       include    system-auth
auth       optional   pam_exec.so          expose_authtok /usr/local/bin/mount-zfs-homedir

account    required   pam_access.so
account    required   pam_nologin.so
account    include    system-auth

password   include    system-auth

session    optional   pam_loginuid.so
session    optional   pam_keyinit.so       force revoke
session    include    system-auth
auth       optional   pam_exec.so          expose_authtok /usr/local/bin/mount-zfs-homedir
session    optional   pam_motd.so
session    optional   pam_mail.so          dir=/var/spool/mail standard quiet
-session   optional   pam_systemd.so
session    required   pam_env.so
EOF
fi

if [ ! -f /etc/systemd/system/zfs-unload-keys.service ]; then
  cat > /etc/systemd/system/zfs-unload-keys.service << EOF
[Unit]
Description=Unload ZFS Keys periodically if not in use.

[Service]
Type=oneshot
ExecStart=-/usr/bin/zfs unload-key -a
EOF
fi

if [ ! -f /etc/systemd/system/zfs-unload-keys.timer ]; then
  cat > /etc/systemd/system/zfs-unload-keys.timer << EOF
[Unit]
Description=Unload ZFS Keys periodically if not in use.

[Timer]
OnBootSec=15min
OnUnitActiveSec=15min

[Install]
WantedBy=timers.target
EOF
fi

if [ ! -f /etc/profile.d/zfshomeunlock.sh ]; then
cat > /etc/profile.d/zfshomeunlock.sh << "EOF"
if { [ -t 0 ] && [ -t 2 ]; }; then

# Check if home is not-mounted and enabled. If so load key, mount, and cd into new mount
        if { [ "$(/usr/bin/systemctl is-active home-$USER.mount)" != "active" ]  && [ "$(/usr/bin/systemctl is-enabled home-$USER.automount)" = "enabled" ]; } > /dev/null 2>&1 ; then
                /usr/bin/zfs load-key zroot/data/home/$USER
                sudo /usr/bin/systemctl start home-$USER.automount
                cd /home/$USER
        fi
fi
EOF
fi
systemctl enable home-"$USERNAME".automount zfs-unload-keys.timer
